from flask import Flask, render_template, request, jsonify
import pandas as pd
from main import preprocess_and_train_model, debug_recommend_items_for_champion

app = Flask(__name__)

champions_tags = {
'Heimerdinger': 'Mage, Support',
 'LeeSin': 'Fighter, Assassin',
 'Lissandra': 'Mage',
 'MissFortune': 'Marksman, Mage',
 'Lux': 'Mage, Support',
 'Garen': 'Fighter, Tank',
 'Diana': 'Fighter, Assassin',
 'Gragas': 'Fighter, Mage',
 'Twitch': 'Marksman, Assassin',
 'Senna': 'Support, Marksman',
 'Teemo': 'Marksman, Mage',
 'Nunu': 'Tank, Mage',
 'Katarina': 'Assassin, Mage',
 'Ashe': 'Marksman, Support',
 'Thresh': 'Support, Tank',
 'Yorick': 'Fighter, Tank',
 'JarvanIV': 'Fighter, Tank',
 'Brand': 'Mage, Support',
 'Pantheon': 'Fighter, Assassin',
 'Sett': 'Fighter, Tank',
 'Malzahar': 'Mage',
 'Alistar': 'Tank, Support',
 'Blitzcrank': 'Tank, Support',
 'Ornn': 'Tank',
 'Khazix': 'Assassin',
 'Qiyana': 'Assassin',
 'Varus': 'Marksman, Mage',
 'Mordekaiser': 'Fighter, Mage',
 'Singed': 'Tank, Mage',
 'Irelia': 'Fighter, Assassin',
 'Jhin': 'Marksman, Mage',
 'Volibear': 'Fighter, Tank',
 'Veigar': 'Mage',
 'Samira': 'Marksman, Assassin',
 'Amumu': 'Tank, Support',
 'Tristana': 'Marksman, Assassin',
 'Viego': 'Fighter, Assassin',
 'Lucian': 'Marksman, Assassin',
 'Braum': 'Tank, Support',
 'Aatrox': 'Fighter',
 'Akali': 'Assassin',
 'Draven': 'Marksman',
 'Janna': 'Support, Mage',
 'Ekko': 'Assassin, Mage',
 'Fizz': 'Assassin, Fighter',
 'KogMaw': 'Marksman, Mage',
 'Lulu': 'Support, Mage',
 'Rengar': 'Assassin, Fighter',
 'Aphelios': 'Marksman',
 'Darius': 'Fighter, Tank',
 'Rammus': 'Tank',
 'Swain': 'Mage, Support',
 'Nami': 'Support, Mage',
 'TahmKench': 'Tank, Support',
 'Kayn': 'Fighter, Assassin',
 'Nautilus': 'Tank, Support',
 'Caitlyn': 'Marksman',
 'Aurora': 'Mage, Assassin',
 'Yasuo': 'Fighter, Assassin',
 'Camille': 'Fighter, Assassin',
 'Zac': 'Tank, Fighter',
 'Ahri': 'Mage, Assassin',
 'Azir': 'Mage, Marksman',
 'Olaf': 'Fighter, Tank',
 'Shaco': 'Assassin',
 'Belveth': 'Fighter',
 'Ezreal': 'Marksman, Mage',
 'Leona': 'Tank, Support',
 'XinZhao': 'Fighter, Tank',
 'Renekton': 'Fighter, Tank',
 'Warwick': 'Fighter, Tank',
 'Smolder': 'Marksman, Mage',
 'Evelynn': 'Assassin, Mage',
 'Syndra': 'Mage',
 'Milio': 'Support, Mage',
 'Jinx': 'Marksman',
 'Pyke': 'Support, Assassin',
 'Yone': 'Fighter, Assassin',
 'Ziggs': 'Mage',
 'Ryze': 'Mage',
 'Viktor': 'Mage',
 'Karma': 'Mage, Support',
 'KSante': 'Tank, Fighter',
 'Ivern': 'Support, Mage',
 'AurelionSol': 'Mage',
 'Xayah': 'Marksman',
 'Kennen': 'Mage',
 'Ambessa': 'Fighter, Assassin',
 'Hecarim': 'Fighter, Tank',
 'Kaisa': 'Marksman, Mage',
 'Yuumi': 'Support, Mage',
 'Skarner': 'Tank, Fighter',
 'Orianna': 'Mage, Support',
 'Sivir': 'Marksman',
 'Hwei': 'Mage, Support',
 'Soraka': 'Support, Mage',
 'Illaoi': 'Fighter, Tank',
 'Udyr': 'Fighter, Tank',
 'Nasus': 'Fighter, Tank',
 'Trundle': 'Fighter, Tank',
 'Kayle': 'Mage, Marksman',
 'Gangplank': 'Fighter',
 'Shen': 'Tank',
 'Malphite': 'Tank, Mage',
 'Galio': 'Tank, Mage',
 'Rumble': 'Fighter, Mage',
 'Corki': 'Marksman, Mage',
 'Zoe': 'Mage',
 'Naafiri': 'Assassin, Fighter',
 'Lillia': 'Fighter, Mage',
 'Anivia': 'Mage',
 'Neeko': 'Mage, Support',
 'Jayce': 'Marksman, Fighter',
 'Briar': 'Fighter, Assassin',
 'Taric': 'Support, Tank',
 'DrMundo': 'Tank, Fighter',
 'Maokai': 'Tank, Support',
 'Kalista': 'Marksman',
 'MasterYi': 'Assassin, Fighter',
 'Poppy': 'Tank, Fighter',
 'Zed': 'Assassin',
 'Vex': 'Mage',
 'MonkeyKing': 'Fighter, Tank',
 'Kassadin': 'Assassin, Mage',
 'Sejuani': 'Tank',
 'Rakan': 'Support',
 'Karthus': 'Mage',
 'Vi': 'Fighter, Assassin',
 'Rell': 'Tank, Support',
 'Bard': 'Support, Mage',
 'Taliyah': 'Mage, Support',
 'Talon': 'Assassin',
 'Gnar': 'Fighter, Tank',
 'Seraphine': 'Support, Mage',
 'Elise': 'Assassin, Mage',
 'Sona': 'Support, Mage',
 'Zyra': 'Mage, Support',
 'Urgot': 'Fighter, Tank',
 'Velkoz': 'Mage, Support',
 'Morgana': 'Mage, Support',
 'Vayne': 'Marksman, Assassin',
 'Cassiopeia': 'Mage',
 'Gwen': 'Fighter',
 'Quinn': 'Marksman, Assassin',
 'Graves': 'Marksman',
 'Akshan': 'Marksman, Assassin',
 'Nilah': 'Fighter, Assassin',
 'TwistedFate': 'Mage, Marksman',
 'Vladimir': 'Mage, Fighter',
 'Xerath': 'Mage, Support',
 'Nidalee': 'Assassin, Mage',
 'Annie': 'Mage, Support',
 'Sylas': 'Mage, Assassin',
 'Kindred': 'Marksman',
 'Jax': 'Fighter',
 'Zeri': 'Marksman',
 'Zilean': 'Support, Mage',
 'Sion': 'Tank, Fighter',
 'Riven': 'Fighter, Assassin',
 'Nocturne': 'Fighter, Assassin',
 'Leblanc': 'Assassin, Mage',
 'Renata': 'Support, Mage',
 'Chogath': 'Tank, Mage',
 'Tryndamere': 'Fighter, Assassin',
 'Kled': 'Fighter',
 'Fiora': 'Fighter, Assassin',
 'RekSai': 'Fighter, Tank',
 'FiddleSticks': 'Mage, Support',
 'Shyvana': 'Fighter, Mage'}


# Încarcă dataset-ul
df = pd.read_csv("output.csv")

# Preprocesează și antrenează modelul
model, interaction_matrix, champion_to_id, item_to_id = preprocess_and_train_model(df)

@app.route('/')
def index():
    # Generează lista de campioni din `champion_to_id`
    champions = sorted(champion_to_id.keys())
    return render_template('index.html', champions=champions)

@app.route('/get_items', methods=['POST'])
def get_items():
    selected_champion = request.json.get('champion')

    # Obține recomandările
    recommended_items = debug_recommend_items_for_champion(
        champion_name=selected_champion,
        n_recommendations=6,
        model=model,
        interaction_matrix=interaction_matrix,
        champion_to_id=champion_to_id,
        item_to_id=item_to_id
    )

    # Obține tag-urile campionului
    champion_tags = champions_tags.get(selected_champion, "No tags available")

    # Returnează datele în format JSON
    return jsonify(items=recommended_items, tags=champion_tags)

if __name__ == '__main__':
    app.run(debug=True)